/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.mgrimpo.adventofcode.year2019;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;

public class Day2 {

  public static int[] executeIntCodeProgram(int[] intCodeProgram) {
    intCodeProgram = intCodeProgram.clone();
    for (int i = 0; i < intCodeProgram.length; i += 4) {
      var opCode = intCodeProgram[i];
      if (opCode == 99) {
        break;
      }
      var firstOperandAddress = intCodeProgram[i + 1];
      var secondOperandAddress = intCodeProgram[i + 2];
      var resultAddress = intCodeProgram[i + 3];
      intCodeProgram[resultAddress] =
          calculateOpCodeResult(
              opCode, intCodeProgram[firstOperandAddress], intCodeProgram[secondOperandAddress]);
    }
    return intCodeProgram;
  }

  private static int calculateOpCodeResult(int opCode, int firstOperand, int secondOperand) {
    switch (opCode) {
      case 1:
        return firstOperand + secondOperand;
      case 2:
        return firstOperand * secondOperand;
      default:
        throw new RuntimeException("Invalid Op Code");
    }
  }

  public static void main(String[] args) throws IOException {
    var puzzleInput = readPuzzleInput(Paths.get("input.txt"));
    puzzleOne(puzzleInput);
    puzzleTwo(puzzleInput);
  }

  private static void puzzleTwo(int[] puzzleInput) {
    System.out.println("Day 2 : Puzzle 2");
    final var desiredOutput = 19690720;
    final var nounVerbCode = findInputForOutput(desiredOutput, puzzleInput);
    System.out.printf("The desired 'noun * 100 + verb' code is: %s\n", nounVerbCode);
  }

  private static int findInputForOutput(int desiredOutput, int[] programMemory) {
    for (int i = 0; i < 10000; i++) {
      var noun = i / 100;
      var verb = i % 100;
      var memoryCopy = programMemory.clone();
      setInputMemory(memoryCopy, noun, verb);
      var resultMemory = executeIntCodeProgram(memoryCopy);
      if (resultMemory[0] == desiredOutput) return i;
    }
    throw new RuntimeException("No noun/verb combination for the desired output was found.");
  }

  private static void setInputMemory(int[] programMemory, int noun, int verb) {
    programMemory[1] = noun;
    programMemory[2] = verb;
  }

  private static void puzzleOne(int[] puzzleInput) throws IOException {
    System.out.println("Day 2 : Puzzle 1");
    restore1202AlarmState(puzzleInput);
    var resultIntCodeState = executeIntCodeProgram(puzzleInput);
    var puzzleOneSolution = resultIntCodeState[0];
    System.out.printf("The value at position 0 is: %s\n", puzzleOneSolution);
  }

  private static void restore1202AlarmState(int[] intCodeProgram) {
    intCodeProgram[1] = 12;
    intCodeProgram[2] = 2;
  }

  private static int[] readPuzzleInput(Path path) throws IOException {
    var intCodeArray = Files.readString(path).split(",");
    return Arrays.stream(intCodeArray).mapToInt(Integer::parseInt).toArray();
  }
}
